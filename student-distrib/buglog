CHECKPOINT 1:
IDT: bootloop, set function pointers in table correctly, but reserved bits were not set correctly, caused system to bootloop
IDT: Make errors, certain C files were trying to be compiled as ASM, this was because my includes did not have include shields, making certain sections of code being included in places they were not supposed to be + multiple times

RTC: 
Bug: Incorrectly disabling and enabling interrupts for RTC functionality.
Solution: Incorporating disabling and enabling within kernel to handle all issues that might occur if RTC were left in an undefined state as a result.

Keyboard: 
P: handler never entered even called directed from test.
S: make global variables volatile. Also deleted unnecessary functions. Turns out I am way over thinking it.

P: the result is undefined. deleting an unused function could break it. Simply adding it back would not work. A long sequence of performance needs to be done to make it work.
S:I messed up a few things in the pic branch to cause this funky bug. I re fetched the master branch and added several files necessary for the keyboard and it just works. The previous bug could also be due to this problem.

Paging:
Bug: Screen not being written to/cleared correctly after boot
Solution: The page entry for the video memory was at the wrong location in the page table associated with memory locations 0-4mb.
Bug: Screen would clear but then the system would hang before kernel.c was able to finish execution.
Solution: Call to enable_paging() needed to happen at the end of kernel.c instead of happening much earlier during the boot process, such as in boot.S

CHECKPOINT2:
Keyboard:
P: Any function key crashed the kernel.
S: Do not return from the switch, just break. No need to save these executions.
P: Function keys do not work as they should be.
S: Comparison out of range, change current_char type to uint8_t (reorganized the file, can not see it now)
P:  TAB key causes funny extra characters when the enter key is pressed.
S: I forgot to change keyboard.top accordingly. Now it should be good.
P: keyboard ‘delete’ after ‘enter’ does not delete the correct number of characters if the terminal read is not called.
S: Use a flag to lock the buffer if terminal read is not being run.

Terminal Driver:
P: Keyboard backspace wasn’t moving the cursor backwards
S: PUTC automatically increments screen.x and screen.y, so in deletec function must decrement x/y once before putc(‘ ‘) and once afterwards
P: Terminal read never waited
S: never checked that the keyboard buffer top wasn’t 0, so terminal_read always thought it was ready

RTC:
P: RTC wasn’t able to set frequency to 256 or higher
S: unsigned 8 isn’t large enough to hold all the inputs for RTC frequency, unsigned 8 is just the size of buffer element, changed it to use uint32_t

File Directory:
P: Multiple calls to dir_read would lead to inconsistent reads of the contents of the file directory, such as starting at the incorrect location
S: Needed to account for the newlines that were being added to the buffer to format the names of the files/dirs in the current directory
P: Multiple calls to file_read would not properly read across data blocks
S: Needed to correctly index into the correct data block depending on the offset that was provided as an argument, as consecutive reads should start at data blocks further down.
P: Indexing into a specific spot in the datablock very far off
S: Needed to access the bytes member of the datablock struct to correctly access the starting byte of the read.

CHECKPOINT 3:

EXECUTE:
Double cast while allocating for pcb caused pointer arithmetic to be wrong and pcb was placed in wrong spot
When resetting IF, didn’t use $ before 0x200 causing flags to be messed up
Incorrect parameters being passed to function: forgot to set the ss before iret from execute
read_dentry_by_name: allowing things like "shello" to execute as it was comparing to the wrong length

HALT:
Trying to jump to the end of execute and iret did not work as when halting you're in a different kernel stack than executing
solution: add the parent's ebp when executing current process to current process' pcb, pass it in to argument to halt assembly, take it, leave return
page fault when trying to return: forgot to flush TLBS

RWOC:
Function jump table in assembly was not getting setup in memory correctly, moved it to c
When opening a file, it sets available to 0, but doesn't reset it to 1 if open fails

Rtc:
P: pingpong unable to change the frequency
S: argument should be accepted from buf instead of nbyte. Changed the protocol and it works.

CHECKPOINT 4:

OPEN:
When trying to open a file, if it didn't work we never reset the available status in the fd array

Dir Read:
read more than one dir at a time, tried to fill the buffer with all dir names consecutively instead of stopping after 1

Certain drivers had the wrong return values for their open/close/read/write, went through and fixed all that up

RTC:
P: Virtualization issues when handling frequency greater than 512 and less than 1024. Problem do to ~1024Hz being out of sync, not beign able to handle interrupts in one sec.
S: When freq is 1024, we manually set the rate as to avoid this issue. Now RTC frequency changes appropriately 

CHECKPOINT 5:
RTC: 
P: clock become slower when opening and running multiple terminals
S: split rtc interrupts and corresponding data into 3 copies

Terminal:
P: Cursor would glitch out and jump to different locations on the screen if multiple processes were running concurrently
S: The cursor position was being updated everytime that the cursor position changed, however this was incorrect. The behavior was updates so that it would only update the position when drawing the on screen process, and not when drawing to vmem of an off screen process

P: When typing to the keyboard, the text would sometimes write on screen and then not write on screen intermittently.
S: When the pit would switch to a processes off screen, a keyboard interrupt would just write to the off screen's video memory. To fix this, a keyboard interrupt would switch vmem to drawing on-screen before switching back to the off-screen process before ending the interrupt

P: When spamming switching between terminals when one of the terminals was running ping pong, a little bit of ping pong would "splatter" into the second terminal if timed correctly.
S: We needed to not only copy the vmem when handing a terminal switch, but we also need to update the page table so the on_screen process was the one writing to the real video memory page.

P: Originally exiting a terminal would return the screen to whatever terminal "spawned it", this caused issues when 1->2->3, but exiting 2 before 3
S: On exit always switch terminals to terminal 0 since this will always exist

Get_Args_syscall:
P: when requesting args for a command like "grep " or "cat ", it would return success even though there were no arguments
S: add a check for empty argument string in the syscall 